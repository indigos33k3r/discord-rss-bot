#!/bin/bash
# Title: discord-rss-bot
# Author: simonizor
# Description: Post RSS feeds to Discord using a webhook
# License: MIT
# Dependencies: rsstail, recode, curl

# list of feeds; one feed per line in url|name|color|avatar_url format
# list may also be in url|name|color|avatar_url|webook_url format to specify a different webhook for each feed
# all options other than 'webhook_url' *MUST* be specified
# 'url' must be a valid RSS feed that is readable by 'rsstail'
# 'name' will be used as the bot's username when posting; '-' in the 'name' will be replaced with a space
# 'color' must be in decimal format; see https://www.mathsisfun.com/hexadecimal-decimal-colors.html
# 'avatar_url' must be a valid image acceptable for Discord avatars
# multiple 'webhook_url's may be specified per RSS feed by separating them with a comma (Ex: webhook_url1,webhook_url2)
# if 'webhook_url' is not specified in this list, it *MUST* be set to the WEBHOOK_URL variable below the list
# when the 'webhook_url' is used in the list, a variable may be set per each 'webhook_url' as shown below
WEBHOOK_DL="https://discordapp.com/api/webhooks/channelid/webhooktoken"
WEBHOOK_FACTORY="https://discordapp.com/api/webhooks/channelid2/webhooktoken2"
WEBHOOK_SUPPORT="https://discordapp.com/api/webhooks/channelid2/webhooktoken3"
WEBHOOK_HACKER="https://discordapp.com/api/webhooks/channelid2/webhooktoken4"
WEBHOOK_NEON="https://discordapp.com/api/webhooks/channelid2/webhooktoken5"
RSS_FEEDS="https://www.archlinux.org/feeds/news/|Arch-News|0153255|https://u.teknik.io/7w2Oi.png|$WEBHOOK_DL
https://www.archlinux.org/feeds/packages/x86_64/core/|Arch-Updates|0153255|https://u.teknik.io/7w2Oi.png|$WEBHOOK_DL
https://news.opensuse.org/feed/|openSUSE-News|7584293|https://u.teknik.io/KIQC6.png|$WEBHOOK_DL
https://www.simonizor.net/tumbleweed-feed.xml|Tumbleweed-Updates|7584293|https://u.teknik.io/4Rvsl.png|$WEBHOOK_DL
https://lists.opensuse.org/opensuse-factory/mailinglist.rss|openSUSE-Factory|7584293|https://u.teknik.io/4Rvsl.png|$WEBHOOK_FACTORY
https://lists.opensuse.org/opensuse-support/mailinglist.rss|openSUSE-Support|7584293|https://u.teknik.io/KIQC6.png|$WEBHOOK_SUPPORT
https://hnrss.org/frontpage?description=0&link=comments|Hacker-News|10647351|https://news.ycombinator.com/y18.gif|$WEBHOOK_HACKER
https://build.neon.kde.org/view/iso/rssAll|KDE-neon-ISOs|4046989|https://u.teknik.io/3PzMl.png|$WEBHOOK_NEON
http://feeds.feedburner.com/d0od|OMG-Ubuntu|10647351|https://u.teknik.io/SK4CP.png|$WEBHOOK_DL
https://www.phoronix.com/rss.php|Phoronix|6523985|https://u.teknik.io/MH9M4.png|$WEBHOOK_DL
https://nonfree.news/feed.xml|Nonfree-News|11415560|https://u.teknik.io/xwlAU.png|$WEBHOOK_DL
https://fedoramagazine.org/feed/|Fedora-Magazine|4145893|https://u.teknik.io/RKsBb.png|$WEBHOOK_DL
https://voidlinux.eu/atom.xml|Void-News|3563080|https://u.teknik.io/Dx6Jl.png|$WEBHOOK_DL
https://lwn.net/headlines/newrss|LWN|16777021|https://u.teknik.io/h01zz.png|$WEBHOOK_DL
https://www.debian.org/News/news|Debian-News|13041718|https://u.teknik.io/RIcPu.png|$WEBHOOK_DL
https://solus-project.com/categories/news/index.xml|Solus-News|5412066|https://u.teknik.io/A022n.png|$WEBHOOK_DL
https://www.gamingonlinux.com/article_rss.php|GamingOnLinux|93089|https://u.teknik.io/dSsCW.png|$WEBHOOK_DL
https://xkcd.com/rss.xml|xkcd|93089|https://xkcd.com/s/0b7742.png|$WEBHOOK_DL"
# 'webhook_url' used when not specified in list above; multiple webhook urls may be listed in comma separated format
WEBHOOK_URL="webhook_url1,webhook_url2"
# time to sleep between checking feeds
RSS_CHECK_TIME=180
# max amount of characters to be sent in embed description (Discord's max is 2048)
CHARACTER_LIMIT=700
# run a for loop that checks the Pub.date of each feed in RSS_FEEDS
function checkfeeds {
    mkdir -p ~/.cache/discord-rss
    for feed in $RSS_FEEDS; do
        # unset used variables
        unset FEED_URL FEED_NAME BOT_USERNAME FEED_COLOR AVATAR_URL POST_LINK NEW_POST_LINK
        # set FEED_URL FEED_NAME FEED_COLOR and AVATAR_URL using cut
        FEED_URL="$(echo $feed | cut -f1 -d'|')"
        FEED_NAME="$(echo $feed | cut -f2 -d'|')"
        # set bot username using FEED_NAME and replace - with a space
        BOT_USERNAME="$(echo $feed | cut -f2 -d'|' | tr '-' ' ')"
        FEED_COLOR="$(echo $feed | cut -f3 -d'|')"
        AVATAR_URL="$(echo $feed | cut -f4 -d'|')"
        # if WEBHOOK_URL set in list, use it instead
        if [ ! -z "$(echo $feed | cut -f5 -d'|')" ]; then
            WEBHOOK_URL="$(echo $feed | cut -f5 -d'|')"
        fi
        # if last entry from feed stored, get POST_LINK for feed using grep and cut
        if [ -f "$HOME/.cache/discord-rss/$FEED_NAME" ]; then
            POST_LINK="$(grep -m1 '^Link:' ~/.cache/discord-rss/$FEED_NAME | cut -f2- -d' ')"
        fi
        # get NEW_POST_LINK for feed using getfeed function, grep, and cut
        NEW_POST_LINK="$(getfeed $FEED_URL | grep -m1 '^Link:' | cut -f2- -d' ')"
        # if NEW_POST_LINK not empty and does not match POST_LINK, write latest entry to ~/.cache/discord-rss/$FEED_NAME
        if [ ! -z "$NEW_POST_LINK" ] && [ ! "$NEW_POST_LINK" = "$POST_LINK" ]; then
            echo "[$(date +'%D %T')] New post in $BOT_USERNAME"
            getfeed "$FEED_URL" > ~/.cache/discord-rss/"$FEED_NAME"
            # run a for loop to post to multiple webhook urls if present
            for webhook in $(echo "$WEBHOOK_URL" | tr ',' '\n'); do
                postfeed "$webhook"
                # sleep 1 to avoid potentially hitting rate limit
                sleep 1
            done
        fi
    done
}
# use rsstail to get the latest feed
function getfeed {
    local RSS_URL="$1"
    # reverse output for feeds that are weird and backwards
    case "$FEED_NAME" in
        openSUSE-Factory|openSUSE-Support)
            FEED_CONTENT="$(rsstail -Hd1plru "$RSS_URL" -n 1 -b $CHARACTER_LIMIT)"
            ;;
        # use raw HTML for xkcd
        xkcd)
            FEED_CONTENT="$(rsstail -d1plu "$RSS_URL" -n 1 -b $CHARACTER_LIMIT)"
            ;;
        *)
            FEED_CONTENT="$(rsstail -Hd1plu "$RSS_URL" -n 1 -b $CHARACTER_LIMIT)"
            ;;
    esac
    case $? in
        0)
            echo -e "$FEED_CONTENT"
            ;;
        *)
            echo "null"
            ;;
    esac
}
# create json file containing embed data to upload to webhook URL
function createjson {
cat > /tmp/discord-rss.json << EOL
{
    "username": "$BOT_USERNAME",
    "avatar_url": "$AVATAR_URL",
    "embeds": [{
        "title": "$FEED_TITLE",
        "url": "$FEED_LINK",
        "description": "$FEED_DESC",
        "color": "$FEED_COLOR",
        "$IMAGE_TYPE": {
          "url": "$THUMBNAIL_URL"
        }
    }]
}

EOL
}
# post feed to Discord using curl
function postfeed {
    local UPLOAD_URL="$1"
    # get feed data for json file using grep and cut
    FEED_TITLE="$(grep -m1 '^Title:' ~/.cache/discord-rss/$FEED_NAME | cut -f2- -d' ' | tr '"' "'")"
    FEED_LINK="$(grep -m1 '^Link:' ~/.cache/discord-rss/$FEED_NAME | cut -f2- -d' ')"
    # try to find picture links for thumbnail in embed
    THUMBNAIL_URL="$(rsstail -d1u "$FEED_URL" -n 1 | grep -om1 'http.*\.png\|http.*\.jpg' | cut -f1 -d' ' | tr -d '"')"
    # if no THUMBNAIL_URL found, just use AVATAR_URL
    if [ -z "$THUMBNAIL_URL" ]; then
        THUMBNAIL_URL="$AVATAR_URL"
        IMAGE_TYPE="thumbnail"
    else
        IMAGE_TYPE="image"
    fi
    # use grep to get rid of everything except the description then use sed to get rid of the Description label and replace new lines with '\n'
    # also use recode to turn html escapes into normal symbols then use sed to replace a couple of weird ones that recode adds
    case "$FEED_NAME" in
        # get rid of new lines in LWN posts; too messy with them
        LWN)
            FEED_DESC="$(cat ~/.cache/discord-rss/$FEED_NAME | grep -v '^Title:' | grep -v '^Link:' | grep -v '^Pub.date:' | sed "s%Description: %%" | tr '\n' ' ' | tr '"' "'" | tr '\t' ' ' | tr -d '\r' | sed '/^$/d')"
            ;;
        # find description from HTML for xkcd
        xkcd)
            FEED_DESC="$(cat ~/.cache/discord-rss/$FEED_NAME | grep -v '^Title:' | grep -v '^Link:' | grep -v '^Pub.date:' | sed "s%Description: %%" | cut -f4 -d'"' | recode h4 | sed 's%^.*%&\\n%g;s%â..%%g;s%Â%%g;s%Ð¡%C%g' | tr -d '\n' | tr '"' "'" | tr '\t' ' ' | tr -d '\r' | sed 's%\\n\\n\\n%\\n%g;s%\\n\\n%\\n%g')"
            ;;
        # don't use recode on feeds that don't need it as it messes up some foreign characters
        Phoronix|openSUSE-Factory|openSUSE-Support)
            FEED_DESC="$(cat ~/.cache/discord-rss/$FEED_NAME | grep -v '^Title:' | grep -v '^Link:' | grep -v '^Pub.date:' | sed "s%Description: %%" | sed 's%^.*%&\\n%g' | tr -d '\n' | tr '"' "'" | tr '\t' ' ' | tr -d '\r')"
            ;;
        *)
            FEED_DESC="$(cat ~/.cache/discord-rss/$FEED_NAME | grep -v '^Title:' | grep -v '^Link:' | grep -v '^Pub.date:' | sed "s%Description: %%" | recode h4 | sed 's%^.*%&\\n%g;s%â..%%g;s%Â%%g;s%Ð¡%C%g' | tr -d '\n' | tr '"' "'" | tr '\t' ' ' | tr -d '\r' | sed 's%\\n\\n\\n%\\n%g;s%\\n\\n%\\n%g')"
            ;;
    esac
    # check amount of characters; assume that more than 650 is trunicated and add '[...]'
    if [ $(echo $FEED_DESC | wc -c) -gt 650 ]; then
        FEED_DESC="$(echo "$FEED_DESC" | rev | cut -f2- -d' ' | rev) [...]"
    fi
    # skip posting certain feeds
    case "$FEED_TITLE" in
        # dont post LWN.net paid articles
        \[\$\]*)
            echo "[$(date +'%D %T')] Skipping feed $BOT_USERNAME title $FEED_TITLE"
            ;;
        *)
            # create json file containing embed data to upload to webhook URL
            createjson
            # use curl to send /tmp/discord-rss.json to WEBHOOK_URL
            curl -iL -X POST -H "Content-Type: application/json" -T "/tmp/discord-rss.json" "$UPLOAD_URL" || echo "Upload failed"
            echo
            ;;
    esac
    # rm -f /tmp/discord-rss.json
    # unset used variables
    unset FEED_TITLE FEED_LINK FEED_DESC THUMBNAIL_URL
}
# create /tmp/.discord-rss-bot for while loop
LOOP_FILE="/tmp/.discord-rss-bot-$RANDOM"
# set trap to remove /tmp/.discord-rss-bot to kill while loop
trap "rm -f $LOOP_FILE" SIGTERM SIGINT SIGKILL
touch "$LOOP_FILE"
# start while loop that runs every RSS_CHECK_TIME seconds as long as /tmp/.discord-rss-bot exists
while [ -f "$LOOP_FILE" ]; do
    echo "[$(date +'%D %T')] Checking RSS feeds..."
    checkfeeds
    echo "[$(date +'%D %T')] Done checking RSS feeds"
    echo "[$(date +'%D %T')] Sleeping for $RSS_CHECK_TIME seconds..."
    sleep $RSS_CHECK_TIME
done
echo ""
exit 0
